// Code generated by protoc-gen-go.
// source: github.com/micro/monitoring-srv/proto/monitor/monitor.proto
// DO NOT EDIT!

/*
Package monitor is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/monitoring-srv/proto/monitor/monitor.proto

It has these top-level messages:
	HealthChecksRequest
	HealthChecksResponse
*/
package monitor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import monitor1 "github.com/micro/go-platform/monitor/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthChecksRequest struct {
	Id     string                      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status monitor1.HealthCheck_Status `protobuf:"varint,2,opt,name=status,enum=HealthCheck_Status" json:"status,omitempty"`
	Limit  uint64                      `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset uint64                      `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *HealthChecksRequest) Reset()                    { *m = HealthChecksRequest{} }
func (m *HealthChecksRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthChecksRequest) ProtoMessage()               {}
func (*HealthChecksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthChecksResponse struct {
	Healthchecks []*monitor1.HealthCheck `protobuf:"bytes,1,rep,name=healthchecks" json:"healthchecks,omitempty"`
}

func (m *HealthChecksResponse) Reset()                    { *m = HealthChecksResponse{} }
func (m *HealthChecksResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthChecksResponse) ProtoMessage()               {}
func (*HealthChecksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthChecksResponse) GetHealthchecks() []*monitor1.HealthCheck {
	if m != nil {
		return m.Healthchecks
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthChecksRequest)(nil), "HealthChecksRequest")
	proto.RegisterType((*HealthChecksResponse)(nil), "HealthChecksResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Monitor service

type MonitorClient interface {
	HealthChecks(ctx context.Context, in *HealthChecksRequest, opts ...client.CallOption) (*HealthChecksResponse, error)
}

type monitorClient struct {
	c           client.Client
	serviceName string
}

func NewMonitorClient(serviceName string, c client.Client) MonitorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "monitor"
	}
	return &monitorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *monitorClient) HealthChecks(ctx context.Context, in *HealthChecksRequest, opts ...client.CallOption) (*HealthChecksResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Monitor.HealthChecks", in)
	out := new(HealthChecksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Monitor service

type MonitorHandler interface {
	HealthChecks(context.Context, *HealthChecksRequest, *HealthChecksResponse) error
}

func RegisterMonitorHandler(s server.Server, hdlr MonitorHandler) {
	s.Handle(s.NewHandler(&Monitor{hdlr}))
}

type Monitor struct {
	MonitorHandler
}

func (h *Monitor) HealthChecks(ctx context.Context, in *HealthChecksRequest, out *HealthChecksResponse) error {
	return h.MonitorHandler.HealthChecks(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x8f, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0xe9, 0x07, 0x41, 0x1c, 0xa1, 0x83, 0x5b, 0xa4, 0xa8, 0x13, 0x0a, 0x4b, 0x97, 0x3a,
	0x52, 0x58, 0x10, 0x88, 0x89, 0xa5, 0x0b, 0x0b, 0xfc, 0x82, 0xd4, 0x38, 0xb1, 0x45, 0x9c, 0x0b,
	0xbe, 0x0b, 0xbf, 0x9f, 0xe0, 0x8a, 0x2a, 0x15, 0x99, 0xac, 0x7b, 0xed, 0xe7, 0x9e, 0xd7, 0xf0,
	0x54, 0x59, 0x36, 0xdd, 0x5e, 0x2a, 0x74, 0x99, 0xb3, 0xca, 0x63, 0xe6, 0xb0, 0xb1, 0x8c, 0xde,
	0x36, 0xd5, 0x96, 0xfc, 0x77, 0xd6, 0x7a, 0xe4, 0x63, 0xf8, 0x77, 0xca, 0x90, 0xae, 0x1f, 0xfe,
	0xc1, 0x15, 0x6e, 0xdb, 0xba, 0xe0, 0x12, 0xbd, 0x3b, 0x32, 0x27, 0x1b, 0x0e, 0x64, 0xaa, 0x61,
	0xb9, 0xd3, 0x45, 0xcd, 0xe6, 0xc5, 0x68, 0xf5, 0x49, 0x6f, 0xfa, 0xab, 0xd3, 0xc4, 0x02, 0x60,
	0x6a, 0x3f, 0x92, 0xc9, 0xed, 0x64, 0x73, 0x29, 0xee, 0x20, 0x22, 0x2e, 0xb8, 0xa3, 0x64, 0xda,
	0xcf, 0x8b, 0x7c, 0x29, 0x07, 0x84, 0x7c, 0x0f, 0x57, 0xe2, 0x1a, 0xce, 0x6b, 0xeb, 0x2c, 0x27,
	0xb3, 0xfe, 0xcd, 0x5c, 0x2c, 0x20, 0xc2, 0xb2, 0x24, 0xcd, 0xc9, 0xfc, 0x77, 0x4e, 0x1f, 0x61,
	0x75, 0xaa, 0xa1, 0x16, 0x1b, 0xd2, 0x22, 0x85, 0xd8, 0x84, 0x5c, 0x85, 0xbc, 0x37, 0xce, 0x36,
	0x57, 0x79, 0x3c, 0x34, 0xe4, 0x3b, 0xb8, 0x78, 0x3d, 0x74, 0x16, 0xcf, 0x10, 0x0f, 0xd7, 0x88,
	0x95, 0x1c, 0x29, 0xbf, 0xbe, 0x91, 0x63, 0xae, 0xf4, 0x6c, 0x1f, 0x85, 0x3f, 0xdf, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x9c, 0xfe, 0x3c, 0x17, 0x6c, 0x01, 0x00, 0x00,
}
